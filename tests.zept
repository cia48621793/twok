### 42 trivial
def __main__():
    return 42
### 0 trivial 2
def __main__():
    pass
### -1 line 3, col 9
def __main__():
    return 33
        return 99
### 44 more exprs
def __main__():
    print 33
    print 99
    print 99
    return 44
### -1 line 1, col 8
def ab cd():
    return 33
### -1 no entry point

### 0 blank lines
def __main__():
    return 0


### 1 simple if 0
def __main__():
    if 2:
        return 1
    return 0

### 0 simple if 1
def __main__():
    if 0:
        return 1
    return 0

### 1 simple if 2
def __main__():
    if 2 < 9999999:
        return 1
    return 0

### 0 simple if 3
def __main__():
    if 9999999 < 2:
        return 1
    return 0

### 0 simple if 4
def __main__():
    if 2 < 2:
        return 1
    return 0

### 1 simple if 5
def __main__():
    if 100 <= 100:
        return 1
    return 0

### 1 simple if 6
def __main__():
    if 101 <= 100:
        return 0
    return 1

### 999 simple if 6
def __main__():
    if 101 >= 100:
        return 999
    return 1

### 13 comment 0
# this is a comment
def __main__():
    # this is another, indented
    return 13

### 13 comment 1
def __main__(): # suffix comment
    return 13 # another
# more


### 1 elif 0
def __main__():
    if 1:
        return 1
    elif 1:
        return 2
    return 3

### 2 elif 1
def __main__():
    if 0:
        return 1
    elif 1:
        return 2
    return 3

### 3 elif 2
def __main__():
    if 0:
        return 1
    elif 0:
        return 2
    return 3

### 4 elif 3
def __main__():
    if 0:
        return 1
    elif 1:
        pass
    elif 1:
        return 3
    return 4

### -1 expecting lval
def __main__():
    4 = 5

### 20710 no val return
def __main__():
    return

### 20710 ret after noval ret
def __main__():
    return
    return 19

### 41 assign
def __main__():
    x = 41
    999
    return x

### 0 assign, no ret
def __main__():
    x = 41

### 123 assign two vars
def __main__():
    x = 123
    y = x
    x = 999
    return y

### -1 DISABLED uninitialized local
def __main__():
    y = x

### -1 DISABLED uninitialized local
def __main__():
    if 0:
        x = 5
    else:
        y = x
    return y

### 10 two funcs
def stuff():
    pass
def __main__():
    return 10

### 19 call func
def stuff():
    return 19
def __main__():
    x = 15
    return stuff()

### 765 call func 2
def stuff():
    return 765
def __main__():
    x = 15
    y = stuff()
    z = 12
    return y

### 3 basic or
def __main__():
    return 0 or 3

### 19 basic or 2
def __main__():
    return 0 or 19 or 3

### 10 basic or 3
def __main__():
    return 10 or 19 or 3

### 0 basic or 4
def __main__():
    return 0 or 0

### 1 basic or 5
def __main__():
    return 1 or 15

### 15 basic or 6
def __main__():
    return 0 or 0 or 15

### 1 basic or 7
def __main__():
    return 1 or 0 or 0 or 0 or 15

### 33 if with or
def __main__():
    if 0 or 1:
        return 33
    return 0

### 0 basic and 0
def __main__():
    return 1 and 0

### 11 basic and 1
def __main__():
    return 1 and 11

### 0 basic and 2
def __main__():
    return 46 and 0 and 1

### 91 basic and 3
def __main__():
    return 46 and 1 and 1 and 91

### 0 basic not 0
def __main__():
    return not 1

### 0 basic not 1
def __main__():
    return not 453

### 1 basic not 2
def __main__():
    return not 0

### 1 basic not 3
def __main__():
    return not 4 or not 0

### 2 add 0
def __main__():
    return 1+1

### 1387 add 1
def __main__():
    return 43+10+100+1234

### -10 sub 0
def __main__():
    return 10-20

### -110 sub 1
def __main__():
    return 100 - 200 - 10

### 15 mul 0
def __main__():
    return 3*5

### 2000 mul 1
def __main__():
    return 20*100

### 31 combined math 0
def __main__():
    return 2*5+7*3

### 15 bitor 0
def __main__():
    return 7 | 8

### 15 bitand 0
def __main__():
    return 255 & 15

### 0 bitxor 0
def __main__():
    return 255 ^ 255

### 20 div 0
def __main__():
    return 200 / 10

### -20 div 1 neg
# no unary - or grouping () yet!
def __main__():
    return -200 / 10

### 20 mod 0
def __main__():
    return 120 % 50

### -20 mod 1
def __main__():
    return -120 % 50

### 0 mod 2
def __main__():
    return -120 % 20

### 255 not 0
def __main__():
    return ~0 & 255

### -2 not 1
def __main__():
    return ~0 - 1

### 123 unary +
def __main__():
    return +123

### 80 non-parens
def __main__():
    return 100-220 % 100

### -20 parens
def __main__():
    return (100-220) % 100

### -1 ')' expected
def __main__():
    return (100 % 100

### -1 got ')'
def __main__():
    )

### 384 reg usage
def __main__():
    return ((1+1) * (2+2)) * ((3+3) * (4+4))

### 99999 END
# vim: set ft=python:
